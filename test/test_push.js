// Generated by CoffeeScript 1.8.0
(function() {
  var Check, PushEvernote, Task, UpdateEvernote, async, noteStore, rule1, rule2, schedule, txErr;

  PushEvernote = require('../lib/pushEvernote');

  async = require('async');

  Task = require('../models/task');

  txErr = require('../lib/txErr');

  noteStore = require('../lib/noteStore');

  UpdateEvernote = require('../lib/updateEvernote');

  Check = require('../lib/check');

  schedule = require("node-schedule");

  rule1 = new schedule.RecurrenceRule();

  rule2 = new schedule.RecurrenceRule();

  rule1.dayOfWeek = [0, new schedule.Range(1, 6)];

  rule1.hour = 10;

  rule1.minute = 0;

  rule2.dayOfWeek = [0, new schedule.Range(1, 6)];

  rule2.hour = 10;

  rule2.minute = 3;

  schedule.scheduleJob(rule1, function() {
    var col;
    col = [
      {
        url: 'https://api.zhihu.com/collections/29469118/answers',
        noteBook: 'f082258a-fd9a-4713-98a0-d85fa838f019'
      }, {
        url: 'https://api.zhihu.com/collections/30429493/answers',
        noteBook: 'ac14ddad-cc5b-439a-82f2-2348afb9f7e0'
      }, {
        url: 'https://api.zhihu.com/collections/29084869/answers',
        noteBook: '359e0882-b0a7-41bc-8437-38fe1afff418'
      }, {
        url: 'https://api.zhihu.com/collections/41332067/answers',
        noteBook: 'c3c8c27b-c014-4b10-83b2-b98461affaf3'
      }, {
        url: 'https://api.zhihu.com/collections/21017107/answers',
        noteBook: 'a8ef249b-aa81-4f66-9d34-645aa79f1183'
      }
    ];
    return col.forEach(function(item) {
      var c;
      c = new Check(item.url, item.noteBook);
      return c.getList();
    });
  });

  schedule.scheduleJob(rule2, function() {
    async.waterfall([
      function(cb) {
        return Task.find({
          status: 1
        }, null, {
          sort: {
            _id: -1
          }
        }, function(err, rows) {
          if (err) {
            return txErr({
              err: err,
              fun: 'TaskFind'
            }, callback);
          }
          return cb(null, rows);
        });
      }, function(rows, cb) {
        return async.eachSeries(rows, function(item, callback) {
          var p;
          p = new PushEvernote(item.url, noteStore, item.noteBook);
          return p.pushNote(callback);
        }, function() {
          return console.log("#  all do #");
        });
      }
    ]);
    return async.waterfall([
      function(cb) {
        return Task.find({
          status: 3
        }, null, {
          sort: {
            _id: -1
          }
        }, function(err, rows) {
          if (err) {
            return txErr({
              err: err,
              fun: 'TaskFind'
            }, callback);
          }
          return cb(null, rows);
        });
      }, function(rows) {
        return async.eachSeries(rows, function(item, callback) {
          var u;
          if (item.guid) {
            u = new UpdateEvernote(item.url, noteStore, item.noteBook, item.guid, item);
            return u.upNote(callback);
          }
        }, function() {
          return console.log("# all do #");
        });
      }
    ]);
  });

}).call(this);

//# sourceMappingURL=test_push.js.map
