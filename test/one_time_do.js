// Generated by CoffeeScript 1.8.0
(function() {
  var Check, PushEvernote, Task, UpdateEvernote, async, noteStore, rule1, rule2, schedule, txErr;

  PushEvernote = require('../lib/pushEvernote');

  async = require('async');

  Task = require('../models/task');

  txErr = require('../lib/txErr');

  noteStore = require('../lib/noteStore');

  UpdateEvernote = require('../lib/updateEvernote');

  Check = require('../lib/check');

  schedule = require("node-schedule");

  rule1 = new schedule.RecurrenceRule();

  rule2 = new schedule.RecurrenceRule();

  rule1.dayOfWeek = [0, new schedule.Range(1, 6)];

  rule1.hour = 0;

  rule1.minute = 25;

  rule2.dayOfWeek = [0, new schedule.Range(1, 6)];

  rule2.hour = 0;

  rule2.minute = 25;

  async.waterfall([
    function(cb) {
      return Task.find({
        status: 1
      }, null, {
        sort: {
          _id: -1
        }
      }, function(err, rows) {
        if (err) {
          return txErr({
            err: err,
            fun: 'TaskFind'
          }, callback);
        }
        return cb(null, rows);
      });
    }, function(rows, cb) {
      return async.eachSeries(rows, function(item, callback) {
        var p;
        p = new PushEvernote(item.url, noteStore, item.noteBook);
        return p.pushNote(callback);
      }, function() {
        console.log("#  all do #");
        return async.waterfall([
          function(cb) {
            return Task.find({
              status: 3
            }, null, {
              sort: {
                _id: -1
              }
            }, function(err, rows) {
              if (err) {
                return txErr({
                  err: err,
                  fun: 'TaskFind'
                }, callback);
              }
              return cb(null, rows);
            });
          }, function(rows) {
            return async.eachSeries(rows, function(item, callback) {
              var u;
              if (item.guid) {
                u = new UpdateEvernote(item.url, noteStore, item.noteBook, item.guid, item);
                return u.upNote(callback);
              }
            }, function() {
              return console.log("# all do up #");
            });
          }
        ]);
      });
    }
  ]);

}).call(this);

//# sourceMappingURL=one_time_do.js.map
