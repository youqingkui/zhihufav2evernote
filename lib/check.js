// Generated by CoffeeScript 1.8.0
(function() {
  var Check, Task, async, request;

  async = require('async');

  request = require('request');

  Task = require('../models/task');

  Check = (function() {
    function Check(url, noteBooks) {
      this.url = url;
      this.noteBooks = noteBooks;
      this.headers = {
        'User-Agent': 'osee2unifiedRelease/332 CFNetwork/711.3.18 Darwin/14.0.0',
        'Authorization': 'oauth 5774b305d2ae4469a2c9258956ea49',
        'Content-Type': 'application/json'
      };
    }

    Check.prototype.getList = function(cb) {
      var op, self;
      self = this;
      op = {
        url: url,
        headers: self.headers,
        gzip: true
      };
      return async.waterfall([
        function(callback) {
          return requrest.get(op, function(err, res, body) {
            var data;
            if (err) {
              return txErr({
                err: err,
                fun: 'getList',
                url: self.url
              }, cb);
            }
            data = JSON.parse(body);
            return callback(null, data);
          });
        }, function(data, callback) {
          var a;
          if (data.data.length) {
            return a = 123;
          }
        }
      ]);
    };

    Check.prototype.checkAdd = function(data, cb) {
      var self;
      self = this;
      return async.eachSeries(data, function(item, callback) {
        return Task.findOne({
          url: item.url
        }, function(err, row) {
          if (err) {
            return txErr({
              err: err,
              answer: item.url,
              fun: 'checkAdd'
            }, cb);
          }
          if (row) {
            console.log("already exits ==>", item.url);
            return callback();
          } else {
            return self.addTask(item, function(err) {});
          }
        });
      });
    };

    Check.prototype.addTask = function(data, cb) {
      var self, t;
      self = this;
      t = Task();
      t.url = data.url;
      t.noteBook = self.noteBook;
      t.id = data.id;
      t.created_time = data.created_time;
      t.updated_time = data.updated_time;
      return t.save(function(err) {
        if (err) {
          return txErr({
            err: err,
            fun: 'addTask',
            url: data.url
          }, cb);
        }
        return cb();
      });
    };

    return Check;

  })();

}).call(this);

//# sourceMappingURL=check.js.map
