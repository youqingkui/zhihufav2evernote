// Generated by CoffeeScript 1.8.0
(function() {
  var Check, Task, async, request, txErr;

  async = require('async');

  request = require('request');

  Task = require('../models/task');

  txErr = require('../lib/txErr');

  Check = (function() {
    function Check(url, noteBook) {
      this.url = url;
      this.noteBook = noteBook;
      this.headers = {
        'User-Agent': 'osee2unifiedRelease/332 CFNetwork/711.3.18 Darwin/14.0.0',
        'Authorization': 'oauth 5774b305d2ae4469a2c9258956ea49',
        'Content-Type': 'application/json'
      };
    }

    Check.prototype.getList = function(url) {
      var op, self;
      self = this;
      if (!url) {
        url = self.url;
      }
      op = {
        url: url,
        headers: self.headers,
        gzip: true
      };
      return async.waterfall([
        function(callback) {
          return request.get(op, function(err, res, body) {
            var data;
            if (err) {
              return txErr({
                err: err,
                fun: 'getList',
                url: self.url
              }, cb);
            }
            data = JSON.parse(body);
            return callback(null, data);
          });
        }, function(data, callback) {
          if (data.data.length) {
            return self.checkAdd(data, callback);
          } else {
            return console.log(data);
          }
        }
      ]);
    };

    Check.prototype.checkAdd = function(data, cb) {
      var self;
      self = this;
      return async.eachSeries(data.data, function(item, callback) {
        return Task.findOne({
          url: item.url
        }, function(err, row) {
          if (err) {
            return txErr({
              err: err,
              answer: item.url,
              fun: 'checkAdd'
            }, cb);
          }
          if (row) {
            return self.upTask(item, row, callback);
          } else {
            return self.addTask(item, callback);
          }
        });
      }, function(err) {
        if (err) {
          return cb(err);
        }
        return self.getList(data.paging.next);
      });
    };

    Check.prototype.addTask = function(data, cb) {
      var self, t;
      self = this;
      t = Task();
      t.url = data.url;
      t.noteBook = self.noteBook;
      t.id = data.id;
      t.created_time = data.created_time;
      t.updated_time = data.updated_time;
      t.title = data.question.title;
      return t.save(function(err) {
        if (err) {
          return txErr({
            err: err,
            fun: 'addTask',
            url: data.url
          }, cb);
        }
        console.log("+++++++++++++++++++++++");
        console.log("添加成功", t.url, t.title);
        console.log("+++++++++++++++++++++++");
        return cb();
      });
    };

    Check.prototype.upTask = function(data, row, cb) {
      console.log("already exits ==>", data.url, data.question.title);
      if (row.updated_time && data.updated_time !== row.updated_time) {
        row.updated_time = data.updated_time;
        if (row.status === 2 && row.guid) {
          row.status = 3;
          console.log("######################################");
          console.log("【need update】 ", data.title, data.question.title);
          console.log("######################################");
        }
        return row.save(function(err) {
          if (err) {
            return txErr({
              err: err,
              fun: 'upTask',
              url: data.url
            }, cb);
          }
          console.log("######################################");
          console.log("update time", data.title, data.question.title);
          console.log("######################################");
          return cb();
        });
      } else {
        return cb();
      }
    };

    return Check;

  })();

  module.exports = Check;

}).call(this);

//# sourceMappingURL=check.js.map
