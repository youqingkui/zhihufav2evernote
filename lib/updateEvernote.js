// Generated by CoffeeScript 1.8.0
(function() {
  var PushEvernote, UpdateEvernote, async, noteStore, txErr, updateNote,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  PushEvernote = require('./pushEvernote');

  updateNote = require('./updateNote');

  noteStore = require('./noteStore');

  txErr = require('./txErr');

  async = require('async');

  UpdateEvernote = (function(_super) {
    __extends(UpdateEvernote, _super);

    function UpdateEvernote(url, noteStore, noteBook, guid, row) {
      this.url = url;
      this.noteStore = noteStore;
      this.noteBook = noteBook;
      this.guid = guid;
      this.row = row;
      UpdateEvernote.__super__.constructor.apply(this, arguments);
    }

    UpdateEvernote.prototype.upNote = function(cb) {
      var self;
      self = this;
      return async.series([
        function(callback) {
          return self.getContent(callback);
        }, function(callback) {
          return self.changeContent(callback);
        }, function(callback) {
          return self.updateNoteInfo(callback);
        }, function(callback) {
          return self.changeStatus(callback);
        }
      ], function() {
        return cb();
      });
    };

    UpdateEvernote.prototype.changeStatus = function(cb) {
      var self;
      self = this;
      self.row.status = 2;
      return self.row.save(function(err) {
        if (err) {
          return txErr({
            err: err,
            fun: 'changeStatus',
            url: self.url
          }, cb);
        }
        return cb();
      });
    };

    UpdateEvernote.prototype.updateNoteInfo = function(cb) {
      var options, self;
      self = this;
      options = {
        sourceUrl: self.sourceUrl,
        resources: self.resourceArr,
        notebookGuid: self.notebookGuid
      };
      console.log(self.sourceUrl);
      return updateNote(noteStore, self.guid, self.title, self.enContent, options, function(err, note) {
        if (err) {
          return txErr({
            err: err,
            fun: 'updateNoteInfo',
            url: self.url
          }, cb);
        }
        return cb();
      });
    };

    return UpdateEvernote;

  })(PushEvernote);

  module.exports = UpdateEvernote;

}).call(this);

//# sourceMappingURL=updateEvernote.js.map
