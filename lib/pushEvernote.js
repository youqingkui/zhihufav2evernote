// Generated by CoffeeScript 1.8.0
(function() {
  var Evernote, PushEvernote, Task, async, cheerio, crypto, makeNote, request, txErr;

  request = require('request');

  async = require('async');

  makeNote = require('./createNote');

  Evernote = require('evernote').Evernote;

  cheerio = require('cheerio');

  crypto = require('crypto');

  txErr = require('./txErr');

  Task = require('../models/task');

  PushEvernote = (function() {
    function PushEvernote(url, noteStore, noteBook) {
      this.url = url;
      this.noteStore = noteStore;
      this.noteBook = noteBook;
      this.headers = {
        'User-Agent': 'osee2unifiedRelease/332 CFNetwork/711.3.18 Darwin/14.0.0',
        'Authorization': 'oauth 5774b305d2ae4469a2c9258956ea49',
        'Content-Type': 'application/json'
      };
      this.resourceArr = [];
    }

    PushEvernote.prototype.pushNote = function(cb) {
      var self;
      self = this;
      return async.series([
        function(callback) {
          return self.getContent(callback);
        }, function(callback) {
          return self.changeContent(callback);
        }, function(callback) {
          return self.createNote(callback);
        }, function(callback) {
          return self.changeStatus(callback);
        }
      ], function() {
        return cb();
      });
    };

    PushEvernote.prototype.changeStatus = function(cb) {
      var self;
      self = this;
      return async.waterfall([
        function(callback) {
          return Task.findOne({
            url: self.url
          }, function(err, row) {
            if (err) {
              return txErr({
                err: err,
                fun: 'changeStatus',
                url: self.url
              }, cb);
            }
            if (!row) {
              return txErr({
                err: 'not find url change',
                fun: 'changeStatus',
                url: self.url
              }, cb);
            }
            return callback(null, row);
          });
        }, function(row) {
          row.status = 2;
          row.guid = self.guid;
          return row.save(function(err) {
            if (err) {
              return txErr({
                err: err,
                fun: 'changeStatus-save',
                url: self.url
              }, cb);
            }
            return cb();
          });
        }
      ]);
    };

    PushEvernote.prototype.getContent = function(cb) {
      var op, self;
      self = this;
      op = {
        url: self.url,
        headers: self.headers,
        gzip: true
      };
      return request.get(op, function(err, res, body) {
        var data;
        if (err) {
          return txErr({
            err: err,
            fun: 'getContent'
          }, cb);
        }
        data = JSON.parse(body);
        self.title = data.question.title.trim();
        console.log("title ==>", self.title);
        self.tagArr = [];
        self.sourceUrl = 'http://www.zhihu.com/question/' + data.question.id + '/answer/' + data.id;
        self.content = data.content;
        self.created = Date.now / 1000;
        return cb();
      });
    };

    PushEvernote.prototype.changeContent = function(cb) {
      var $, imgs, self;
      self = this;
      $ = cheerio.load(self.content, {
        decodeEntities: false
      });
      $("*").map(function(i, elem) {
        var k, v, _ref, _results;
        _ref = elem.attribs;
        _results = [];
        for (k in _ref) {
          v = _ref[k];
          if (k !== 'data-actualsrc' && k !== 'src' && k !== 'href' && k !== 'style') {
            $(this).removeAttr(k);
          }
          if (k === 'href') {
            if (!self.checkUrl(v)) {
              _results.push($(this).removeAttr(k));
            } else {
              _results.push(void 0);
            }
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      });
      $("iframe").remove();
      $("article").each(function() {
        return $(this).replaceWith('<div>' + $(this).html() + '</div>');
      });
      $("section").each(function() {
        return $(this).replaceWith('<div>' + $(this).html() + '</div>');
      });
      $("header").each(function() {
        return $(this).replaceWith('<div>' + $(this).html() + '</div>');
      });
      $("noscript").each(function() {
        return $(this).replaceWith('<div>' + $(this).html() + '</div>');
      });
      imgs = $("img");
      console.log("" + self.title + " find img length => " + imgs.length);
      return async.eachSeries(imgs, function(item, callback) {
        var src;
        src = $(item).attr('data-actualsrc');
        if (!src) {
          src = $(item).attr('src');
        }
        return self.readImgRes(src, function(err, resource) {
          var hexHash, md5, newTag;
          if (err) {
            return txErr({
              err: err,
              title: self.title,
              url: self.url,
              fun: 'changeContent'
            }, cb);
          }
          self.resourceArr.push(resource);
          md5 = crypto.createHash('md5');
          md5.update(resource.image);
          hexHash = md5.digest('hex');
          newTag = "<en-media type=" + resource.mime + " hash=" + hexHash + " />";
          $(item).replaceWith(newTag);
          return callback();
        });
      }, function() {
        console.log("" + self.title + " " + imgs.length + " imgs down ok");
        self.enContent = $.html({
          xmlMode: true,
          decodeEntities: false
        });
        return cb();
      });
    };

    PushEvernote.prototype.createNote = function(cb) {
      var self;
      self = this;
      return makeNote(this.noteStore, this.title, this.tagArr, this.enContent, this.sourceUrl, this.resourceArr, this.created, this.updated, this.noteBook, function(err, note) {
        if (err) {
          if (err) {
            return txErr({
              err: err,
              title: self.title
            }, cb);
          }
        }
        self.guid = note.guid;
        console.log("+++++++++++++++++++++++");
        console.log("" + note.title + " create ok");
        console.log("+++++++++++++++++++++++");
        return cb();
      });
    };

    PushEvernote.prototype.readImgRes = function(imgUrl, cb) {
      var op, self;
      self = this;
      op = self.reqOp(imgUrl);
      op.encoding = 'binary';
      op.timeout = 30000;
      return async.auto({
        readImg: function(callback) {
          return request.get(op, function(err, res, body) {
            var mimeType;
            if (err) {
              return cb(err);
            }
            mimeType = res.headers['content-type'];
            mimeType = mimeType.split(';')[0];
            return callback(null, body, mimeType);
          });
        },
        enImg: [
          'readImg', function(callback, result) {
            var data, hash, image, mimeType, resource;
            mimeType = result.readImg[1];
            image = new Buffer(result.readImg[0], 'binary');
            hash = image.toString('base64');
            data = new Evernote.Data();
            data.size = image.length;
            data.bodyHash = hash;
            data.body = image;
            resource = new Evernote.Resource();
            resource.mime = mimeType;
            resource.data = data;
            resource.image = image;
            return cb(null, resource);
          }
        ]
      });
    };

    PushEvernote.prototype.reqOp = function(getUrl) {
      var options;
      options = {
        url: getUrl,
        headers: {
          'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/42.0.2311.90 Safari/537.36'
        }
      };
      return options;
    };

    PushEvernote.prototype.checkUrl = function(href) {
      var re, strRegex;
      strRegex = "^((https|http|ftp|rtsp|mms)?://)";
      +"?(([0-9a-z_!~*'().&=+$%-]+: )?[0-9a-z_!~*'().&=+$%-]+@)?";
      +"(([0-9]{1,3}/.){3}[0-9]{1,3}" + "|";
      +"([0-9a-z_!~*'()-]+/.)*";
      +"([0-9a-z][0-9a-z-]{0,61})?[0-9a-z]/.";
      +"[a-z]{2,6})";
      +"(:[0-9]{1,4})?";
      +"((/?)|";
      +"(/[0-9a-z_!~*'().;?:@&=+$,%#-]+)+/?)$";
      re = new RegExp(strRegex);
      if (re.test(href)) {
        return true;
      } else {
        return false;
      }
    };

    return PushEvernote;

  })();

  module.exports = PushEvernote;

}).call(this);

//# sourceMappingURL=pushEvernote.js.map
