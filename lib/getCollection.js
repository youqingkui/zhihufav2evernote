// Generated by CoffeeScript 1.8.0
(function() {
  var GetCol, Task, async, fs, path, queue, requrest, txErr;

  requrest = require('request');

  fs = require('fs');

  path = require('path');

  queue = require('./getAnswers');

  async = require('async');

  txErr = require('./txErr');

  Task = require('../models/task');

  GetCol = (function() {
    function GetCol(noteStore, noteBook) {
      this.noteStore = noteStore;
      this.noteBook = noteBook;
      this.headers = {
        'User-Agent': 'osee2unifiedRelease/332 CFNetwork/711.3.18 Darwin/14.0.0',
        'Authorization': 'oauth 5774b305d2ae4469a2c9258956ea49',
        'Content-Type': 'application/json'
      };
    }

    GetCol.prototype.getColList = function(url) {
      var op, self;
      self = this;
      op = {
        url: url,
        headers: self.headers,
        gzip: true
      };
      return async.auto({
        getList: function(cb) {
          return requrest.get(op, function(err, res, body) {
            var data;
            if (err) {
              return txErr(op.url, 1, {
                err: err,
                fun: 'getList'
              });
            }
            data = JSON.parse(body);
            return cb(null, data);
          });
        },
        checkList: [
          'getList', function(cb, result) {
            var data;
            data = result.getList;
            if (data.data.length) {
              return async.eachSeries(data.data, function(item, callback) {
                return Task.findOne({
                  url: item.url
                }, function(err, row) {
                  if (err) {
                    return txErr(url, 5, {
                      err: err,
                      answer: item.url,
                      fun: 'checkList'
                    });
                  }
                  if (row) {
                    console.log("already exits ==>", item.url);
                    return callback();
                  } else {
                    return self.addDB(item.url, callback);
                  }
                });
              }, function() {
                return self.getColList(data.paging.next);
              });
            } else {
              console.log(data);
              return cb();
            }
          }
        ],
        getTasks: [
          'checkList', function(cb) {
            return Task.find({
              status: 1
            }, function(err, rows) {
              if (err) {
                return txErr(url, 5, {
                  err: err,
                  fun: 'getTasks'
                });
              }
              return cb(null, rows);
            });
          }
        ],
        addDo: [
          'getTasks', function(cb, result) {
            var tasks;
            tasks = result.getTasks;
            return async.eachSeries(tasks, function(item, callback) {
              queue.push({
                url: item.url,
                noteStore: self.noteStore,
                noteBook: self.noteBook
              }, function(err) {
                if (err) {
                  return txErr(item.url, 6, {
                    err: err,
                    fun: 'addDo'
                  });
                }
                return self.changeStatus(item.url, 2);
              });
              return callback();
            });
          }
        ]
      });
    };

    GetCol.prototype.addDB = function(url, callback) {
      var task;
      task = new Task;
      task.url = url;
      return task.save(function(err, row) {
        if (err) {
          return txErr(url, 5, {
            err: err,
            fun: 'addDB'
          });
        }
        return callback();
      });
    };

    GetCol.prototype.changeStatus = function(url, status) {
      return async.auto({
        findUrl: function(callback) {
          return Task.findOne({
            url: url
          }, function(err, row) {
            if (err) {
              return txErr(url, 5, {
                err: err,
                fun: 'changeStatus-findUrl'
              });
            }
            if (!row) {
              return txErr(url, 7, {
                err: "没有找到url",
                fun: 'changeStatus-findUrl'
              });
            } else {
              return callback(null, row);
            }
          });
        },
        change: [
          'findUrl', function(callback, result) {
            var row;
            row = result.findUrl;
            row.status = status;
            return row.save(function(err, row) {
              if (err) {
                return txErr("", 5, {
                  err: err,
                  fun: "changeStatus-change"
                });
              }
            });
          }
        ]
      });
    };

    GetCol.prototype.getColInfo = function() {};

    return GetCol;

  })();

  module.exports = GetCol;

}).call(this);

//# sourceMappingURL=getCollection.js.map
